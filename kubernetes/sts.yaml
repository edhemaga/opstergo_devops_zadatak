apiVersion: v1
kind: Namespace
metadata:
  name:  redis
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: redis
spec:
  selector:
    app: redis
  type: NodePort
  ports:
    - protocol: TCP
      nodePort: 32400
      # The port does not have to be the as it will be the port used to communicate with the container
      port: 6379
      # Target port points to the port of the container, they have to be the same 
      targetPort: 6379
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: redis
spec:
  replicas: 2
  selector:
    matchLabels:
      app: redis
  serviceName: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:latest
          command:
            - "redis-server"
          args:
            - "--protected-mode"
            - "no"
          ports:
          - containerPort: 6379
          # This is the volume on the container within pod
          volumeMounts:
            - name: data
              mountPath: data
              readOnly: false
          # readinessProbe:
          #   httpGet:
          #     path: /healthz
          #     port: 6379
          #   initialDelaySeconds: 5
          #   periodSeconds: 10
      # Pod anti affinity by selecting pods with certain key-value pairs, distributes them over available nodes
      # Since we have two nodes, there will be two replicas to distribute; in general we should have more nodes than pods if we want to distribute them
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - redis
            # Topology specification is necessary, since we are dealing with minikube, hostname would be used, but usually this would be used with 'zone'
            # Important - topology key of the nodes must be the same not the actual value of the key
            topologyKey: "kubernetes.io/hostname"
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: redis-info
  namespace: redis
spec:
  schedule: "*/1 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: redis-job
            image: redis:latest
            imagePullPolicy: IfNotPresent
            command: [
              '/bin/bash',
              '-c',
              # Host 'redis' was used because of service name, the pod is accessed via service therefore this name is used
              'redis-cli -h redis -p 6379 INFO replication'
              ]
          restartPolicy: OnFailure
